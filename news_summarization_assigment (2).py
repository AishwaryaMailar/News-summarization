# -*- coding: utf-8 -*-
"""News Summarization Assigment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yLlO9iwcnrYQbma2OoJfynQWNddjPJ4L

## Objective

Develop a web-based application that extracts key details from multiple news
articles related
to a given company, performs sentiment analysis, conducts a comparative analysis, and
generates a text-to-speech (TTS) output in Hindi. The tool should allow users to input a
company name and receive a structured sentiment report along with an audio output.

Step1 : Web Scrapping News Extraction from Google
"""

import requests
from bs4 import BeautifulSoup

def fetch_news(company):
    url = f'https://news.google.com/rss/search?q={company}&hl=en-US&gl=US&ceid=US:en'
    response = requests.get(url)

    if response.status_code != 200:
        print("Failed to retrieve news")
        return []

    soup = BeautifulSoup(response.content, 'xml')
    items = soup.find_all('item')

    news_list = []
    for item in items[:10]:  # Get top 10 articles
        title = item.title.text
        link = item.link.text
        pub_date = item.pubDate.text

        news_list.append({
            'title': title,
            'link': link,
            'published_date': pub_date
        })

    return news_list

# Example usage
company = input("Enter a company name"  )
news_articles = fetch_news(company)

for idx, article in enumerate(news_articles, 1):
    print(f"{idx}. {article['title']}")
    print(f"   Link: {article['link']}")
    print(f"   Published Date: {article['published_date']}\n")

"""Step2: Sentiment Analysis

## Install Dependencies
"""

from textblob import TextBlob # Import the TextBlob class
import nltk # Import the nltk module separately

import subprocess
subprocess.run(["python", "-m", "textblob.download_corpora"])

import requests
from bs4 import BeautifulSoup
from textblob import TextBlob

def fetch_news(company):
    url = f'https://news.google.com/rss/search?q={company}&hl=en-US&gl=US&ceid=US:en'
    response = requests.get(url)

    if response.status_code != 200:
        print("Failed to retrieve news")
        return []

    soup = BeautifulSoup(response.content, 'xml')
    items = soup.find_all('item')

    news_list = []
    for item in items[:10]:
        title = item.title.text
        link = item.link.text

        news_list.append({"title": title, "link": link})

    return news_list

def analyze_sentiment(text):
    polarity = TextBlob(text).sentiment.polarity
    if polarity > 0:
        return "Positive"
    elif polarity < 0:
        return "Negative"
    else:
        return "Neutral"

# Get actual news articles
company = "Tesla"
news = fetch_news(company)

# Perform sentiment analysis on valid news titles
for article in news:
    sentiment = analyze_sentiment(article["title"])
    print(f"{article['title']} → {sentiment}")

"""## Sentiment Analysis Code"""

import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import pandas as pd
import matplotlib.pyplot as plt

def fetch_news(company, max_articles=10):
    """Fetch news articles with error handling"""
    url = f'https://news.google.com/rss/search?q={company}&hl=en-US&gl=US&ceid=US:en'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'xml')
        return [{
            "title": item.title.text,
            "link": item.link.text,
            "source": item.source.text if item.source else "Unknown"
        } for item in soup.find_all('item')[:max_articles]]

    except Exception as e:
        print(f"Error fetching news: {e}")
        return []

def analyze_sentiment(text):
    """Robust sentiment analysis"""
    try:
        polarity = TextBlob(text).sentiment.polarity
        if polarity > 0.1:
            return "Positive"
        elif polarity < -0.1:
            return "Negative"
        return "Neutral"
    except:
        return "Neutral"

def analyze_news(company):
    """Complete analysis pipeline"""
    news = fetch_news(company)
    if not news:
        print("No news found")
        return None

    # Add sentiment analysis
    for article in news:
        article['sentiment'] = analyze_sentiment(article['title'])

    # Create DataFrame
    df = pd.DataFrame(news)

    # Print results
    print(f"\nSentiment Analysis for {company} News:")
    print("="*50)
    for i, row in df.iterrows():
        print(f"{i+1}. {row['title']}")
        print(f"   Sentiment: {row['sentiment']}")
        print(f"   Source: {row['source']}\n")

    return df

def plot_sentiment(df):
    """Visualize sentiment distribution"""
    if df is None or df.empty:
        return

    counts = df['sentiment'].value_counts()

    plt.figure(figsize=(12, 5))

    # Bar plot
    plt.subplot(1, 2, 1)
    counts.plot(kind='bar', color=['green', 'gray', 'red'])
    plt.title("Sentiment Count")
    plt.ylabel("Number of Articles")

    # Pie chart
    plt.subplot(1, 2, 2)
    counts.plot(kind='pie', autopct='%1.1f%%', colors=['green', 'gray', 'red'])
    plt.title("Sentiment Distribution")
    plt.ylabel("")

    plt.tight_layout()
    plt.show()

# Example usage
if __name__ == "__main__":
    company = "Tesla"
    news_df = analyze_news(company)
    plot_sentiment(news_df)

"""##Step3 : Comparative Analysis"""

sentiment_counts = {"Positive": 0, "Negative": 0, "Neutral": 0}

for article in news:
    sentiment = analyze_sentiment(article["title"])
    sentiment_counts[sentiment] += 1

print("Sentiment Analysis Summary:")
print(sentiment_counts)

from collections import defaultdict
import matplotlib.pyplot as plt

# Initialize sentiment counter
sentiment_counts = defaultdict(int)

# Analyze each article
for article in news:
    try:
        sentiment = analyze_sentiment(article["title"])
        sentiment_counts[sentiment] += 1
    except Exception as e:
        print(f"Error analyzing article: {e}")
        sentiment_counts["Error"] += 1

# Calculate percentages
total = sum(sentiment_counts.values())
percentages = {k: f"{(v/total)*100:.1f}%" for k, v in sentiment_counts.items()}

# Print results
print("\nSentiment Analysis Summary:")
print("=" * 30)
for sentiment, count in sentiment_counts.items():
    print(f"{sentiment}: {count} ({percentages.get(sentiment, '0%')})")

# Simple ASCII visualization
print("\nSentiment Distribution:")
max_count = max(sentiment_counts.values()) if sentiment_counts else 1
for sentiment, count in sentiment_counts.items():
    bar = '█' * int(50 * count / max_count)
    print(f"{sentiment.ljust(8)}: {bar} {count}")

# Optional: Matplotlib visualization
if sentiment_counts:
    plt.figure(figsize=(8, 4))
    plt.bar(sentiment_counts.keys(), sentiment_counts.values(),
            color=['green', 'red', 'blue', 'gray'])
    plt.title("News Sentiment Distribution")
    plt.ylabel("Number of Articles")
    plt.show()

import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
from collections import defaultdict
import json

# Sample topic keywords (in a real app, you'd use NLP topic modeling)
TOPIC_KEYWORDS = {
    "Electric Vehicles": ["ev", "electric vehicle", "battery", "charging"],
    "Stock Market": ["stock", "share", "investment", "market cap"],
    "Innovation": ["innovation", "breakthrough", "new tech", "invention"],
    "Regulations": ["regulation", "law", "legal", "compliance"],
    "Autonomous Vehicles": ["self-driving", "autonomous", "fsd", "autopilot"]
}

def fetch_news(company, max_articles=5):
    """Fetch news articles from Google News RSS"""
    url = f'https://news.google.com/rss/search?q={company}&hl=en-US&gl=US&ceid=US:en'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'xml')
        items = soup.find_all('item')[:max_articles]

        return [{
            "title": item.title.text,
            "link": item.link.text,
            "summary": item.description.text if item.description else "",
            "source": item.source.text if item.source else "Unknown"
        } for item in items]

    except Exception as e:
        print(f"Error fetching news: {e}")
        return []

def analyze_sentiment(text):
    """Classify sentiment as Positive, Negative, or Neutral"""
    try:
        polarity = TextBlob(text).sentiment.polarity
        if polarity > 0.1:
            return "Positive"
        elif polarity < -0.1:
            return "Negative"
        return "Neutral"
    except:
        return "Neutral"

def extract_topics(text):
    """Simple keyword-based topic extraction"""
    text_lower = text.lower()
    topics = []

    for topic, keywords in TOPIC_KEYWORDS.items():
        if any(keyword in text_lower for keyword in keywords):
            topics.append(topic)

    return topics if topics else ["General"]

def generate_report(company):
    """Generate the complete analysis report"""
    articles = fetch_news(company)
    if not articles:
        return None

    sentiment_counts = defaultdict(int)
    processed_articles = []

    for article in articles:
        sentiment = analyze_sentiment(article["title"])
        sentiment_counts[sentiment] += 1

        processed_articles.append({
            "Title": article["title"],
            "Summary": article["summary"],
            "Sentiment": sentiment,
            "Topics": extract_topics(f"{article['title']} {article['summary']}")
        })

    # Calculate comparative scores (simple ratio)
    total = sum(sentiment_counts.values())
    sentiment_dist = {k: v for k, v in sentiment_counts.items()}

    report = {
        "Company": company,
        "Articles": processed_articles,
        "Comparative Sentiment Score": {
            "Sentiment Distribution": sentiment_dist,
            "Positive Ratio": f"{sentiment_counts['Positive']/total:.1%}" if total else "0%"
        }
    }

    return report

# Example usage
if __name__ == "__main__":
    company = "Tesla"
    report = generate_report(company)

    if report:
        print(json.dumps(report, indent=2))
    else:
        print(f"Failed to generate report for {company}")

"""## Step4 : Text -to-Speech conversion(in Hindi)"""

from gtts import gTTS  # Import the gTTS class

import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
from collections import defaultdict
import json
from gtts import gTTS
import os

# Sample topic keywords (in a real app, you'd use NLP topic modeling)
TOPIC_KEYWORDS = {
    "Electric Vehicles": ["ev", "electric vehicle", "battery", "charging"],
    "Stock Market": ["stock", "share", "investment", "market cap"],
    "Innovation": ["innovation", "breakthrough", "new tech", "invention"],
    "Regulations": ["regulation", "law", "legal", "compliance"],
    "Autonomous Vehicles": ["self-driving", "autonomous", "fsd", "autopilot"]
}

def fetch_news(company, max_articles=5):
    """Fetch news articles from Google News RSS"""
    url = f'https://news.google.com/rss/search?q={company}&hl=en-US&gl=US&ceid=US:en'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'xml')
        items = soup.find_all('item')[:max_articles]

        return [{
            "title": item.title.text,
            "link": item.link.text,
            "summary": item.description.text if item.description else "",
            "source": item.source.text if item.source else "Unknown"
        } for item in items]

    except Exception as e:
        print(f"Error fetching news: {e}")
        return []

def analyze_sentiment(text):
    """Classify sentiment as Positive, Negative, or Neutral"""
    try:
        polarity = TextBlob(text).sentiment.polarity
        if polarity > 0.1:
            return "Positive"
        elif polarity < -0.1:
            return "Negative"
        return "Neutral"
    except:
        return "Neutral"

def extract_topics(text):
    """Simple keyword-based topic extraction"""
    text_lower = text.lower()
    topics = []

    for topic, keywords in TOPIC_KEYWORDS.items():
        if any(keyword in text_lower for keyword in keywords):
            topics.append(topic)

    return topics if topics else ["General"]

def generate_report(company):
    """Generate the complete analysis report"""
    articles = fetch_news(company)
    if not articles:
        return None

    sentiment_counts = defaultdict(int)
    processed_articles = []

    for article in articles:
        sentiment = analyze_sentiment(article["title"])
        sentiment_counts[sentiment] += 1

        processed_articles.append({
            "Title": article["title"],
            "Summary": article["summary"],
            "Sentiment": sentiment,
            "Topics": extract_topics(f"{article['title']} {article['summary']}")
        })

    # Calculate comparative scores (simple ratio)
    total = sum(sentiment_counts.values())
    sentiment_dist = {k: v for k, v in sentiment_counts.items()}

    report = {
        "Company": company,
        "Articles": processed_articles,
        "Comparative Sentiment Score": {
            "Sentiment Distribution": sentiment_dist,
            "Positive Ratio": f"{sentiment_counts['Positive']/total:.1%}" if total else "0%"
        }
    }

    return report

def text_to_hindi_audio(text, filename="output.mp3"):
    """Convert text to Hindi audio using gTTS"""
    try:
        tts = gTTS(text=text, lang='hi')
        tts.save(filename)
        print(f"Audio saved as {filename}")
        return True
    except Exception as e:
        print(f"Error generating audio: {e}")
        return False

def generate_hindi_summary(report):
    """Create a Hindi summary text from the report"""
    if not report:
        return "कोई रिपोर्ट उपलब्ध नहीं है"

    company = report["Company"]
    positive = report["Comparative Sentiment Score"]["Sentiment Distribution"].get("Positive", 0)
    negative = report["Comparative Sentiment Score"]["Sentiment Distribution"].get("Negative", 0)
    neutral = report["Comparative Sentiment Score"]["Sentiment Distribution"].get("Neutral", 0)

    summary = f"""
    {company} के लिए समाचार विश्लेषण:
    कुल लेख: {positive + negative + neutral}
    सकारात्मक: {positive}
    नकारात्मक: {negative}
    तटस्थ: {neutral}

    प्रमुख समाचार:
    """

    for i, article in enumerate(report["Articles"][:3], 1):
        sentiment_map = {
            "Positive": "सकारात्मक",
            "Negative": "नकारात्मक",
            "Neutral": "तटस्थ"
        }
        summary += f"""
        {i}. {article['Title']}
        भावना: {sentiment_map.get(article['Sentiment'], article['Sentiment'])}
        """

    return summary

if __name__ == "__main__":
    company = input("कंपनी का नाम दर्ज करें (जैसे Tesla): ")
    report = generate_report(company)

    if report:
        print(json.dumps(report, indent=2))

        # Generate Hindi summary
        hindi_summary = generate_hindi_summary(report)
        print("\nहिंदी सारांश:")
        print(hindi_summary)

        # Convert to audio
        if text_to_hindi_audio(hindi_summary, f"{company}_hindi.mp3"):
            print(f"हिंदी ऑडियो रिपोर्ट सफलतापूर्वक बनाई गई: {company}_report_hindi.mp3")
    else:
        print(f"{company} के लिए कोई समाचार नहीं मिला")

from IPython.display import Audio, display

#  Replace 'your_file.mp3' with the name of your MP3 file
mp3_filename = 'Tesla_hindi.mp3'

# Display and play the audio
display(Audio(mp3_filename))